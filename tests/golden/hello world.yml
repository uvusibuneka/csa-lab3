source_code: |
  section .data:
      hello: "Hello, world!\n"
  section .text:
  .start:
      push hello
  .loop:
      dup
      ld
      push .break
      xchng
      jz
      push 0
      st
      pop
      inc
      push .loop
      jmp
  .break:
      pop
      hlt
stdin: |
  Nothing gonna change
stdout: |
  Hello world!'
  '

out_code_readable: |
  {
      "code": [
          [
              "0",
              "push",
              "3"
          ],
          [
              "1",
              "dup",
              ""
          ],
          [
              "2",
              "ld",
              ""
          ],
          [
              "3",
              "push",
              "12"
          ],
          [
              "4",
              "xchng",
              ""
          ],
          [
              "5",
              "jz",
              ""
          ],
          [
              "6",
              "push",
              "0"
          ],
          [
              "7",
              "st",
              ""
          ],
          [
              "8",
              "pop",
              ""
          ],
          [
              "9",
              "inc",
              ""
          ],
          [
              "10",
              "push",
              "1"
          ],
          [
              "11",
              "jmp",
              ""
          ],
          [
              "12",
              "pop",
              ""
          ],
          [
              "13",
              "hlt",
              ""
          ]
      ],
      "memory": [
          [
              "3",
              "72"
          ],
          [
              "4",
              "101"
          ],
          [
              "5",
              "108"
          ],
          [
              "6",
              "108"
          ],
          [
              "7",
              "111"
          ],
          [
              "8",
              "44"
          ],
          [
              "9",
              "32"
          ],
          [
              "10",
              "119"
          ],
          [
              "11",
              "111"
          ],
          [
              "12",
              "114"
          ],
          [
              "13",
              "108"
          ],
          [
              "14",
              "100"
          ],
          [
              "15",
              "33"
          ],
          [
              "16",
              "10"
          ],
          [
              "17",
              "0"
          ]
      ]
  }
out_log: |
  DEBUG   machine:simulation    PC:   0 ADDR:   3 MEM_OUT:  72 TOS:   0 COMMAND push      push 3
  INFO    machine:simulation    TOS: 3
  INFO    machine:simulation    STACK: [0]
  DEBUG   machine:simulation    PC:   1 ADDR:   3 MEM_OUT:  72 TOS:   3 COMMAND dup       dup
  INFO    machine:simulation    TOS: 3
  INFO    machine:simulation    STACK: [0, 3]
  DEBUG   machine:simulation    PC:   2 ADDR:   3 MEM_OUT:  72 TOS:   3 COMMAND ld        ld
  INFO    machine:get_char      data_address: 3
  INFO    machine:simulation    TOS: 72
  INFO    machine:simulation    STACK: [0, 3]
  DEBUG   machine:simulation    PC:   3 ADDR:   3 MEM_OUT:  72 TOS:  72 COMMAND push      push 12
  INFO    machine:simulation    TOS: 12
  INFO    machine:simulation    STACK: [0, 3, 72]
  DEBUG   machine:simulation    PC:   4 ADDR:   3 MEM_OUT:  72 TOS:  12 COMMAND xchng     xchng
  INFO    machine:simulation    TOS: 72
  INFO    machine:simulation    STACK: [0, 3, 12]
  DEBUG   machine:simulation    PC:   5 ADDR:   3 MEM_OUT:  72 TOS:  72 COMMAND jz        jz
  INFO    machine:simulation    TOS: 72
  INFO    machine:simulation    STACK: [0, 3]
  DEBUG   machine:simulation    PC:   6 ADDR:   3 MEM_OUT:  72 TOS:  72 COMMAND push      push 0
  INFO    machine:simulation    TOS: 0
  INFO    machine:simulation    STACK: [0, 3, 72]
  DEBUG   machine:simulation    PC:   7 ADDR:   3 MEM_OUT:  72 TOS:   0 COMMAND st        st
  DEBUG   machine:signal_wr     output: '' << 'H'
  INFO    machine:simulation    TOS: 72
  INFO    machine:simulation    STACK: [0, 3]
  DEBUG   machine:simulation    PC:   8 ADDR:   0 MEM_OUT:   0 TOS:  72 COMMAND pop       pop
  INFO    machine:simulation    TOS: 3
  INFO    machine:simulation    STACK: [0]
  DEBUG   machine:simulation    PC:   9 ADDR:   0 MEM_OUT:   0 TOS:   3 COMMAND inc       inc
  INFO    machine:simulation    TOS: 4
  INFO    machine:simulation    STACK: [0]
  DEBUG   machine:simulation    PC:  10 ADDR:   0 MEM_OUT:   0 TOS:   4 COMMAND push      push 1
  INFO    machine:simulation    TOS: 1
  INFO    machine:simulation    STACK: [0, 4]
  DEBUG   machine:simulation    PC:  11 ADDR:   0 MEM_OUT:   0 TOS:   1 COMMAND jmp       jmp
  INFO    machine:simulation    TOS: 4
  INFO    machine:simulation    STACK: [0]
  DEBUG   machine:simulation    PC:   1 ADDR:   0 MEM_OUT:   0 TOS:   4 COMMAND dup       dup
  INFO    machine:simulation    TOS: 4
  INFO    machine:simulation    STACK: [0, 4]
  DEBUG   machine:simulation    PC:   2 ADDR:   0 MEM_OUT:   0 TOS:   4 COMMAND ld        ld
  INFO    machine:get_char      data_address: 4
  INFO    machine:simulation    TOS: 101
  INFO    machine:simulation    STACK: [0, 4]
  DEBUG   machine:simulation    PC:   3 ADDR:   4 MEM_OUT: 101 TOS: 101 COMMAND push      push 12
  INFO    machine:simulation    TOS: 12
  INFO    machine:simulation    STACK: [0, 4, 101]
  DEBUG   machine:simulation    PC:   4 ADDR:   4 MEM_OUT: 101 TOS:  12 COMMAND xchng     xchng
  INFO    machine:simulation    TOS: 101
  INFO    machine:simulation    STACK: [0, 4, 12]
  DEBUG   machine:simulation    PC:   5 ADDR:   4 MEM_OUT: 101 TOS: 101 COMMAND jz        jz
  INFO    machine:simulation    TOS: 101
  INFO    machine:simulation    STACK: [0, 4]
  DEBUG   machine:simulation    PC:   6 ADDR:   4 MEM_OUT: 101 TOS: 101 COMMAND push      push 0
  INFO    machine:simulation    TOS: 0
  INFO    machine:simulation    STACK: [0, 4, 101]
  DEBUG   machine:simulation    PC:   7 ADDR:   4 MEM_OUT: 101 TOS:   0 COMMAND st        st
  DEBUG   machine:signal_wr     output: 'H' << 'e'
  INFO    machine:simulation    TOS: 101
  INFO    machine:simulation    STACK: [0, 4]
  DEBUG   machine:simulation    PC:   8 ADDR:   0 MEM_OUT:   0 TOS: 101 COMMAND pop       pop
  INFO    machine:simulation    TOS: 4
  INFO    machine:simulation    STACK: [0]
  DEBUG   machine:simulation    PC:   9 ADDR:   0 MEM_OUT:   0 TOS:   4 COMMAND inc       inc
  INFO    machine:simulation    TOS: 5
  INFO    machine:simulation    STACK: [0]
  DEBUG   machine:simulation    PC:  10 ADDR:   0 MEM_OUT:   0 TOS:   5 COMMAND push      push 1
  INFO    machine:simulation    TOS: 1
  INFO    machine:simulation    STACK: [0, 5]
  DEBUG   machine:simulation    PC:  11 ADDR:   0 MEM_OUT:   0 TOS:   1 COMMAND jmp       jmp
  INFO    machine:simulation    TOS: 5
  INFO    machine:simulation    STACK: [0]
  DEBUG   machine:simulation    PC:   1 ADDR:   0 MEM_OUT:   0 TOS:   5 COMMAND dup       dup
  INFO    machine:simulation    TOS: 5
  INFO    machine:simulation    STACK: [0, 5]
  DEBUG   machine:simulation    PC:   2 ADDR:   0 MEM_OUT:   0 TOS:   5 COMMAND ld        ld
  INFO    machine:get_char      data_address: 5
  INFO    machine:simulation    TOS: 108
  INFO    machine:simulation    STACK: [0, 5]
  DEBUG   machine:simulation    PC:   3 ADDR:   5 MEM_OUT: 108 TOS: 108 COMMAND push      push 12
  INFO    machine:simulation    TOS: 12
  INFO    machine:simulation    STACK: [0, 5, 108]
  DEBUG   machine:simulation    PC:   4 ADDR:   5 MEM_OUT: 108 TOS:  12 COMMAND xchng     xchng
  INFO    machine:simulation    TOS: 108
  INFO    machine:simulation    STACK: [0, 5, 12]
  DEBUG   machine:simulation    PC:   5 ADDR:   5 MEM_OUT: 108 TOS: 108 COMMAND jz        jz
  INFO    machine:simulation    TOS: 108
  INFO    machine:simulation    STACK: [0, 5]
  DEBUG   machine:simulation    PC:   6 ADDR:   5 MEM_OUT: 108 TOS: 108 COMMAND push      push 0
  INFO    machine:simulation    TOS: 0
  INFO    machine:simulation    STACK: [0, 5, 108]
  DEBUG   machine:simulation    PC:   7 ADDR:   5 MEM_OUT: 108 TOS:   0 COMMAND st        st
  DEBUG   machine:signal_wr     output: 'He' << 'l'
  INFO    machine:simulation    TOS: 108
  INFO    machine:simulation    STACK: [0, 5]
  DEBUG   machine:simulation    PC:   8 ADDR:   0 MEM_OUT:   0 TOS: 108 COMMAND pop       pop
  INFO    machine:simulation    TOS: 5
  INFO    machine:simulation    STACK: [0]
  DEBUG   machine:simulation    PC:   9 ADDR:   0 MEM_OUT:   0 TOS:   5 COMMAND inc       inc
  INFO    machine:simulation    TOS: 6
  INFO    machine:simulation    STACK: [0]
  DEBUG   machine:simulation    PC:  10 ADDR:   0 MEM_OUT:   0 TOS:   6 COMMAND push      push 1
  INFO    machine:simulation    TOS: 1
  INFO    machine:simulation    STACK: [0, 6]
  DEBUG   machine:simulation    PC:  11 ADDR:   0 MEM_OUT:   0 TOS:   1 COMMAND jmp       jmp
  INFO    machine:simulation    TOS: 6
  INFO    machine:simulation    STACK: [0]
  DEBUG   machine:simulation    PC:   1 ADDR:   0 MEM_OUT:   0 TOS:   6 COMMAND dup       dup
  INFO    machine:simulation    TOS: 6
  INFO    machine:simulation    STACK: [0, 6]
  DEBUG   machine:simulation    PC:   2 ADDR:   0 MEM_OUT:   0 TOS:   6 COMMAND ld        ld
  INFO    machine:get_char      data_address: 6
  INFO    machine:simulation    TOS: 108
  INFO    machine:simulation    STACK: [0, 6]
  DEBUG   machine:simulation    PC:   3 ADDR:   6 MEM_OUT: 108 TOS: 108 COMMAND push      push 12
  INFO    machine:simulation    TOS: 12
  INFO    machine:simulation    STACK: [0, 6, 108]
  DEBUG   machine:simulation    PC:   4 ADDR:   6 MEM_OUT: 108 TOS:  12 COMMAND xchng     xchng
  INFO    machine:simulation    TOS: 108
  INFO    machine:simulation    STACK: [0, 6, 12]
  DEBUG   machine:simulation    PC:   5 ADDR:   6 MEM_OUT: 108 TOS: 108 COMMAND jz        jz
  INFO    machine:simulation    TOS: 108
  INFO    machine:simulation    STACK: [0, 6]
  DEBUG   machine:simulation    PC:   6 ADDR:   6 MEM_OUT: 108 TOS: 108 COMMAND push      push 0
  INFO    machine:simulation    TOS: 0
  INFO    machine:simulation    STACK: [0, 6, 108]
  DEBUG   machine:simulation    PC:   7 ADDR:   6 MEM_OUT: 108 TOS:   0 COMMAND st        st
  DEBUG   machine:signal_wr     output: 'Hel' << 'l'
  INFO    machine:simulation    TOS: 108
  INFO    machine:simulation    STACK: [0, 6]
  DEBUG   machine:simulation    PC:   8 ADDR:   0 MEM_OUT:   0 TOS: 108 COMMAND pop       pop
  INFO    machine:simulation    TOS: 6
  INFO    machine:simulation    STACK: [0]
  DEBUG   machine:simulation    PC:   9 ADDR:   0 MEM_OUT:   0 TOS:   6 COMMAND inc       inc
  INFO    machine:simulation    TOS: 7
  INFO    machine:simulation    STACK: [0]
  DEBUG   machine:simulation    PC:  10 ADDR:   0 MEM_OUT:   0 TOS:   7 COMMAND push      push 1
  INFO    machine:simulation    TOS: 1
  INFO    machine:simulation    STACK: [0, 7]
  DEBUG   machine:simulation    PC:  11 ADDR:   0 MEM_OUT:   0 TOS:   1 COMMAND jmp       jmp
  INFO    machine:simulation    TOS: 7
  INFO    machine:simulation    STACK: [0]
  DEBUG   machine:simulation    PC:   1 ADDR:   0 MEM_OUT:   0 TOS:   7 COMMAND dup       dup
  INFO    machine:simulation    TOS: 7
  INFO    machine:simulation    STACK: [0, 7]
  DEBUG   machine:simulation    PC:   2 ADDR:   0 MEM_OUT:   0 TOS:   7 COMMAND ld        ld
  INFO    machine:get_char      data_address: 7
  INFO    machine:simulation    TOS: 111
  INFO    machine:simulation    STACK: [0, 7]
  DEBUG   machine:simulation    PC:   3 ADDR:   7 MEM_OUT: 111 TOS: 111 COMMAND push      push 12
  INFO    machine:simulation    TOS: 12
  INFO    machine:simulation    STACK: [0, 7, 111]
  DEBUG   machine:simulation    PC:   4 ADDR:   7 MEM_OUT: 111 TOS:  12 COMMAND xchng     xchng
  INFO    machine:simulation    TOS: 111
  INFO    machine:simulation    STACK: [0, 7, 12]
  DEBUG   machine:simulation    PC:   5 ADDR:   7 MEM_OUT: 111 TOS: 111 COMMAND jz        jz
  INFO    machine:simulation    TOS: 111
  INFO    machine:simulation    STACK: [0, 7]
  DEBUG   machine:simulation    PC:   6 ADDR:   7 MEM_OUT: 111 TOS: 111 COMMAND push      push 0
  INFO    machine:simulation    TOS: 0
  INFO    machine:simulation    STACK: [0, 7, 111]
  DEBUG   machine:simulation    PC:   7 ADDR:   7 MEM_OUT: 111 TOS:   0 COMMAND st        st
  DEBUG   machine:signal_wr     output: 'Hell' << 'o'
  INFO    machine:simulation    TOS: 111
  INFO    machine:simulation    STACK: [0, 7]
  DEBUG   machine:simulation    PC:   8 ADDR:   0 MEM_OUT:   0 TOS: 111 COMMAND pop       pop
  INFO    machine:simulation    TOS: 7
  INFO    machine:simulation    STACK: [0]
  DEBUG   machine:simulation    PC:   9 ADDR:   0 MEM_OUT:   0 TOS:   7 COMMAND inc       inc
  INFO    machine:simulation    TOS: 8
  INFO    machine:simulation    STACK: [0]
  DEBUG   machine:simulation    PC:  10 ADDR:   0 MEM_OUT:   0 TOS:   8 COMMAND push      push 1
  INFO    machine:simulation    TOS: 1
  INFO    machine:simulation    STACK: [0, 8]
  DEBUG   machine:simulation    PC:  11 ADDR:   0 MEM_OUT:   0 TOS:   1 COMMAND jmp       jmp
  INFO    machine:simulation    TOS: 8
  INFO    machine:simulation    STACK: [0]
  DEBUG   machine:simulation    PC:   1 ADDR:   0 MEM_OUT:   0 TOS:   8 COMMAND dup       dup
  INFO    machine:simulation    TOS: 8
  INFO    machine:simulation    STACK: [0, 8]
  DEBUG   machine:simulation    PC:   2 ADDR:   0 MEM_OUT:   0 TOS:   8 COMMAND ld        ld
  INFO    machine:get_char      data_address: 8
  INFO    machine:simulation    TOS: 44
  INFO    machine:simulation    STACK: [0, 8]
  DEBUG   machine:simulation    PC:   3 ADDR:   8 MEM_OUT:  44 TOS:  44 COMMAND push      push 12
  INFO    machine:simulation    TOS: 12
  INFO    machine:simulation    STACK: [0, 8, 44]
  DEBUG   machine:simulation    PC:   4 ADDR:   8 MEM_OUT:  44 TOS:  12 COMMAND xchng     xchng
  INFO    machine:simulation    TOS: 44
  INFO    machine:simulation    STACK: [0, 8, 12]
  DEBUG   machine:simulation    PC:   5 ADDR:   8 MEM_OUT:  44 TOS:  44 COMMAND jz        jz
  INFO    machine:simulation    TOS: 44
  INFO    machine:simulation    STACK: [0, 8]
  DEBUG   machine:simulation    PC:   6 ADDR:   8 MEM_OUT:  44 TOS:  44 COMMAND push      push 0
  INFO    machine:simulation    TOS: 0
  INFO    machine:simulation    STACK: [0, 8, 44]
  DEBUG   machine:simulation    PC:   7 ADDR:   8 MEM_OUT:  44 TOS:   0 COMMAND st        st
  DEBUG   machine:signal_wr     output: 'Hello' << ','
  INFO    machine:simulation    TOS: 44
  INFO    machine:simulation    STACK: [0, 8]
  DEBUG   machine:simulation    PC:   8 ADDR:   0 MEM_OUT:   0 TOS:  44 COMMAND pop       pop
  INFO    machine:simulation    TOS: 8
  INFO    machine:simulation    STACK: [0]
  DEBUG   machine:simulation    PC:   9 ADDR:   0 MEM_OUT:   0 TOS:   8 COMMAND inc       inc
  INFO    machine:simulation    TOS: 9
  INFO    machine:simulation    STACK: [0]
  DEBUG   machine:simulation    PC:  10 ADDR:   0 MEM_OUT:   0 TOS:   9 COMMAND push      push 1
  INFO    machine:simulation    TOS: 1
  INFO    machine:simulation    STACK: [0, 9]
  DEBUG   machine:simulation    PC:  11 ADDR:   0 MEM_OUT:   0 TOS:   1 COMMAND jmp       jmp
  INFO    machine:simulation    TOS: 9
  INFO    machine:simulation    STACK: [0]
  DEBUG   machine:simulation    PC:   1 ADDR:   0 MEM_OUT:   0 TOS:   9 COMMAND dup       dup
  INFO    machine:simulation    TOS: 9
  INFO    machine:simulation    STACK: [0, 9]
  DEBUG   machine:simulation    PC:   2 ADDR:   0 MEM_OUT:   0 TOS:   9 COMMAND ld        ld
  INFO    machine:get_char      data_address: 9
  INFO    machine:simulation    TOS: 32
  INFO    machine:simulation    STACK: [0, 9]
  DEBUG   machine:simulation    PC:   3 ADDR:   9 MEM_OUT:  32 TOS:  32 COMMAND push      push 12
  INFO    machine:simulation    TOS: 12
  INFO    machine:simulation    STACK: [0, 9, 32]
  DEBUG   machine:simulation    PC:   4 ADDR:   9 MEM_OUT:  32 TOS:  12 COMMAND xchng     xchng
  INFO    machine:simulation    TOS: 32
  INFO    machine:simulation    STACK: [0, 9, 12]
  DEBUG   machine:simulation    PC:   5 ADDR:   9 MEM_OUT:  32 TOS:  32 COMMAND jz        jz
  INFO    machine:simulation    TOS: 32
  INFO    machine:simulation    STACK: [0, 9]
  DEBUG   machine:simulation    PC:   6 ADDR:   9 MEM_OUT:  32 TOS:  32 COMMAND push      push 0
  INFO    machine:simulation    TOS: 0
  INFO    machine:simulation    STACK: [0, 9, 32]
  DEBUG   machine:simulation    PC:   7 ADDR:   9 MEM_OUT:  32 TOS:   0 COMMAND st        st
  DEBUG   machine:signal_wr     output: 'Hello,' << ' '
  INFO    machine:simulation    TOS: 32
  INFO    machine:simulation    STACK: [0, 9]
  DEBUG   machine:simulation    PC:   8 ADDR:   0 MEM_OUT:   0 TOS:  32 COMMAND pop       pop
  INFO    machine:simulation    TOS: 9
  INFO    machine:simulation    STACK: [0]
  DEBUG   machine:simulation    PC:   9 ADDR:   0 MEM_OUT:   0 TOS:   9 COMMAND inc       inc
  INFO    machine:simulation    TOS: 10
  INFO    machine:simulation    STACK: [0]
  DEBUG   machine:simulation    PC:  10 ADDR:   0 MEM_OUT:   0 TOS:  10 COMMAND push      push 1
  INFO    machine:simulation    TOS: 1
  INFO    machine:simulation    STACK: [0, 10]
  DEBUG   machine:simulation    PC:  11 ADDR:   0 MEM_OUT:   0 TOS:   1 COMMAND jmp       jmp
  INFO    machine:simulation    TOS: 10
  INFO    machine:simulation    STACK: [0]
  DEBUG   machine:simulation    PC:   1 ADDR:   0 MEM_OUT:   0 TOS:  10 COMMAND dup       dup
  INFO    machine:simulation    TOS: 10
  INFO    machine:simulation    STACK: [0, 10]
  DEBUG   machine:simulation    PC:   2 ADDR:   0 MEM_OUT:   0 TOS:  10 COMMAND ld        ld
  INFO    machine:get_char      data_address: 10
  INFO    machine:simulation    TOS: 119
  INFO    machine:simulation    STACK: [0, 10]
  DEBUG   machine:simulation    PC:   3 ADDR:  10 MEM_OUT: 119 TOS: 119 COMMAND push      push 12
  INFO    machine:simulation    TOS: 12
  INFO    machine:simulation    STACK: [0, 10, 119]
  DEBUG   machine:simulation    PC:   4 ADDR:  10 MEM_OUT: 119 TOS:  12 COMMAND xchng     xchng
  INFO    machine:simulation    TOS: 119
  INFO    machine:simulation    STACK: [0, 10, 12]
  DEBUG   machine:simulation    PC:   5 ADDR:  10 MEM_OUT: 119 TOS: 119 COMMAND jz        jz
  INFO    machine:simulation    TOS: 119
  INFO    machine:simulation    STACK: [0, 10]
  DEBUG   machine:simulation    PC:   6 ADDR:  10 MEM_OUT: 119 TOS: 119 COMMAND push      push 0
  INFO    machine:simulation    TOS: 0
  INFO    machine:simulation    STACK: [0, 10, 119]
  DEBUG   machine:simulation    PC:   7 ADDR:  10 MEM_OUT: 119 TOS:   0 COMMAND st        st
  DEBUG   machine:signal_wr     output: 'Hello, ' << 'w'
  INFO    machine:simulation    TOS: 119
  INFO    machine:simulation    STACK: [0, 10]
  DEBUG   machine:simulation    PC:   8 ADDR:   0 MEM_OUT:   0 TOS: 119 COMMAND pop       pop
  INFO    machine:simulation    TOS: 10
  INFO    machine:simulation    STACK: [0]
  DEBUG   machine:simulation    PC:   9 ADDR:   0 MEM_OUT:   0 TOS:  10 COMMAND inc       inc
  INFO    machine:simulation    TOS: 11
  INFO    machine:simulation    STACK: [0]
  DEBUG   machine:simulation    PC:  10 ADDR:   0 MEM_OUT:   0 TOS:  11 COMMAND push      push 1
  INFO    machine:simulation    TOS: 1
  INFO    machine:simulation    STACK: [0, 11]
  DEBUG   machine:simulation    PC:  11 ADDR:   0 MEM_OUT:   0 TOS:   1 COMMAND jmp       jmp
  INFO    machine:simulation    TOS: 11
  INFO    machine:simulation    STACK: [0]
  DEBUG   machine:simulation    PC:   1 ADDR:   0 MEM_OUT:   0 TOS:  11 COMMAND dup       dup
  INFO    machine:simulation    TOS: 11
  INFO    machine:simulation    STACK: [0, 11]
  DEBUG   machine:simulation    PC:   2 ADDR:   0 MEM_OUT:   0 TOS:  11 COMMAND ld        ld
  INFO    machine:get_char      data_address: 11
  INFO    machine:simulation    TOS: 111
  INFO    machine:simulation    STACK: [0, 11]
  DEBUG   machine:simulation    PC:   3 ADDR:  11 MEM_OUT: 111 TOS: 111 COMMAND push      push 12
  INFO    machine:simulation    TOS: 12
  INFO    machine:simulation    STACK: [0, 11, 111]
  DEBUG   machine:simulation    PC:   4 ADDR:  11 MEM_OUT: 111 TOS:  12 COMMAND xchng     xchng
  INFO    machine:simulation    TOS: 111
  INFO    machine:simulation    STACK: [0, 11, 12]
  DEBUG   machine:simulation    PC:   5 ADDR:  11 MEM_OUT: 111 TOS: 111 COMMAND jz        jz
  INFO    machine:simulation    TOS: 111
  INFO    machine:simulation    STACK: [0, 11]
  DEBUG   machine:simulation    PC:   6 ADDR:  11 MEM_OUT: 111 TOS: 111 COMMAND push      push 0
  INFO    machine:simulation    TOS: 0
  INFO    machine:simulation    STACK: [0, 11, 111]
  DEBUG   machine:simulation    PC:   7 ADDR:  11 MEM_OUT: 111 TOS:   0 COMMAND st        st
  DEBUG   machine:signal_wr     output: 'Hello, w' << 'o'
  INFO    machine:simulation    TOS: 111
  INFO    machine:simulation    STACK: [0, 11]
  DEBUG   machine:simulation    PC:   8 ADDR:   0 MEM_OUT:   0 TOS: 111 COMMAND pop       pop
  INFO    machine:simulation    TOS: 11
  INFO    machine:simulation    STACK: [0]
  DEBUG   machine:simulation    PC:   9 ADDR:   0 MEM_OUT:   0 TOS:  11 COMMAND inc       inc
  INFO    machine:simulation    TOS: 12
  INFO    machine:simulation    STACK: [0]
  DEBUG   machine:simulation    PC:  10 ADDR:   0 MEM_OUT:   0 TOS:  12 COMMAND push      push 1
  INFO    machine:simulation    TOS: 1
  INFO    machine:simulation    STACK: [0, 12]
  DEBUG   machine:simulation    PC:  11 ADDR:   0 MEM_OUT:   0 TOS:   1 COMMAND jmp       jmp
  INFO    machine:simulation    TOS: 12
  INFO    machine:simulation    STACK: [0]
  DEBUG   machine:simulation    PC:   1 ADDR:   0 MEM_OUT:   0 TOS:  12 COMMAND dup       dup
  INFO    machine:simulation    TOS: 12
  INFO    machine:simulation    STACK: [0, 12]
  DEBUG   machine:simulation    PC:   2 ADDR:   0 MEM_OUT:   0 TOS:  12 COMMAND ld        ld
  INFO    machine:get_char      data_address: 12
  INFO    machine:simulation    TOS: 114
  INFO    machine:simulation    STACK: [0, 12]
  DEBUG   machine:simulation    PC:   3 ADDR:  12 MEM_OUT: 114 TOS: 114 COMMAND push      push 12
  INFO    machine:simulation    TOS: 12
  INFO    machine:simulation    STACK: [0, 12, 114]
  DEBUG   machine:simulation    PC:   4 ADDR:  12 MEM_OUT: 114 TOS:  12 COMMAND xchng     xchng
  INFO    machine:simulation    TOS: 114
  INFO    machine:simulation    STACK: [0, 12, 12]
  DEBUG   machine:simulation    PC:   5 ADDR:  12 MEM_OUT: 114 TOS: 114 COMMAND jz        jz
  INFO    machine:simulation    TOS: 114
  INFO    machine:simulation    STACK: [0, 12]
  DEBUG   machine:simulation    PC:   6 ADDR:  12 MEM_OUT: 114 TOS: 114 COMMAND push      push 0
  INFO    machine:simulation    TOS: 0
  INFO    machine:simulation    STACK: [0, 12, 114]
  DEBUG   machine:simulation    PC:   7 ADDR:  12 MEM_OUT: 114 TOS:   0 COMMAND st        st
  DEBUG   machine:signal_wr     output: 'Hello, wo' << 'r'
  INFO    machine:simulation    TOS: 114
  INFO    machine:simulation    STACK: [0, 12]
  DEBUG   machine:simulation    PC:   8 ADDR:   0 MEM_OUT:   0 TOS: 114 COMMAND pop       pop
  INFO    machine:simulation    TOS: 12
  INFO    machine:simulation    STACK: [0]
  DEBUG   machine:simulation    PC:   9 ADDR:   0 MEM_OUT:   0 TOS:  12 COMMAND inc       inc
  INFO    machine:simulation    TOS: 13
  INFO    machine:simulation    STACK: [0]
  DEBUG   machine:simulation    PC:  10 ADDR:   0 MEM_OUT:   0 TOS:  13 COMMAND push      push 1
  INFO    machine:simulation    TOS: 1
  INFO    machine:simulation    STACK: [0, 13]
  DEBUG   machine:simulation    PC:  11 ADDR:   0 MEM_OUT:   0 TOS:   1 COMMAND jmp       jmp
  INFO    machine:simulation    TOS: 13
  INFO    machine:simulation    STACK: [0]
  DEBUG   machine:simulation    PC:   1 ADDR:   0 MEM_OUT:   0 TOS:  13 COMMAND dup       dup
  INFO    machine:simulation    TOS: 13
  INFO    machine:simulation    STACK: [0, 13]
  DEBUG   machine:simulation    PC:   2 ADDR:   0 MEM_OUT:   0 TOS:  13 COMMAND ld        ld
  INFO    machine:get_char      data_address: 13
  INFO    machine:simulation    TOS: 108
  INFO    machine:simulation    STACK: [0, 13]
  DEBUG   machine:simulation    PC:   3 ADDR:  13 MEM_OUT: 108 TOS: 108 COMMAND push      push 12
  INFO    machine:simulation    TOS: 12
  INFO    machine:simulation    STACK: [0, 13, 108]
  DEBUG   machine:simulation    PC:   4 ADDR:  13 MEM_OUT: 108 TOS:  12 COMMAND xchng     xchng
  INFO    machine:simulation    TOS: 108
  INFO    machine:simulation    STACK: [0, 13, 12]
  DEBUG   machine:simulation    PC:   5 ADDR:  13 MEM_OUT: 108 TOS: 108 COMMAND jz        jz
  INFO    machine:simulation    TOS: 108
  INFO    machine:simulation    STACK: [0, 13]
  DEBUG   machine:simulation    PC:   6 ADDR:  13 MEM_OUT: 108 TOS: 108 COMMAND push      push 0
  INFO    machine:simulation    TOS: 0
  INFO    machine:simulation    STACK: [0, 13, 108]
  DEBUG   machine:simulation    PC:   7 ADDR:  13 MEM_OUT: 108 TOS:   0 COMMAND st        st
  DEBUG   machine:signal_wr     output: 'Hello, wor' << 'l'
  INFO    machine:simulation    TOS: 108
  INFO    machine:simulation    STACK: [0, 13]
  DEBUG   machine:simulation    PC:   8 ADDR:   0 MEM_OUT:   0 TOS: 108 COMMAND pop       pop
  INFO    machine:simulation    TOS: 13
  INFO    machine:simulation    STACK: [0]
  DEBUG   machine:simulation    PC:   9 ADDR:   0 MEM_OUT:   0 TOS:  13 COMMAND inc       inc
  INFO    machine:simulation    TOS: 14
  INFO    machine:simulation    STACK: [0]
  DEBUG   machine:simulation    PC:  10 ADDR:   0 MEM_OUT:   0 TOS:  14 COMMAND push      push 1
  INFO    machine:simulation    TOS: 1
  INFO    machine:simulation    STACK: [0, 14]
  DEBUG   machine:simulation    PC:  11 ADDR:   0 MEM_OUT:   0 TOS:   1 COMMAND jmp       jmp
  INFO    machine:simulation    TOS: 14
  INFO    machine:simulation    STACK: [0]
  DEBUG   machine:simulation    PC:   1 ADDR:   0 MEM_OUT:   0 TOS:  14 COMMAND dup       dup
  INFO    machine:simulation    TOS: 14
  INFO    machine:simulation    STACK: [0, 14]
  DEBUG   machine:simulation    PC:   2 ADDR:   0 MEM_OUT:   0 TOS:  14 COMMAND ld        ld
  INFO    machine:get_char      data_address: 14
  INFO    machine:simulation    TOS: 100
  INFO    machine:simulation    STACK: [0, 14]
  DEBUG   machine:simulation    PC:   3 ADDR:  14 MEM_OUT: 100 TOS: 100 COMMAND push      push 12
  INFO    machine:simulation    TOS: 12
  INFO    machine:simulation    STACK: [0, 14, 100]
  DEBUG   machine:simulation    PC:   4 ADDR:  14 MEM_OUT: 100 TOS:  12 COMMAND xchng     xchng
  INFO    machine:simulation    TOS: 100
  INFO    machine:simulation    STACK: [0, 14, 12]
  DEBUG   machine:simulation    PC:   5 ADDR:  14 MEM_OUT: 100 TOS: 100 COMMAND jz        jz
  INFO    machine:simulation    TOS: 100
  INFO    machine:simulation    STACK: [0, 14]
  DEBUG   machine:simulation    PC:   6 ADDR:  14 MEM_OUT: 100 TOS: 100 COMMAND push      push 0
  INFO    machine:simulation    TOS: 0
  INFO    machine:simulation    STACK: [0, 14, 100]
  DEBUG   machine:simulation    PC:   7 ADDR:  14 MEM_OUT: 100 TOS:   0 COMMAND st        st
  DEBUG   machine:signal_wr     output: 'Hello, worl' << 'd'
  INFO    machine:simulation    TOS: 100
  INFO    machine:simulation    STACK: [0, 14]
  DEBUG   machine:simulation    PC:   8 ADDR:   0 MEM_OUT:   0 TOS: 100 COMMAND pop       pop
  INFO    machine:simulation    TOS: 14
  INFO    machine:simulation    STACK: [0]
  DEBUG   machine:simulation    PC:   9 ADDR:   0 MEM_OUT:   0 TOS:  14 COMMAND inc       inc
  INFO    machine:simulation    TOS: 15
  INFO    machine:simulation    STACK: [0]
  DEBUG   machine:simulation    PC:  10 ADDR:   0 MEM_OUT:   0 TOS:  15 COMMAND push      push 1
  INFO    machine:simulation    TOS: 1
  INFO    machine:simulation    STACK: [0, 15]
  DEBUG   machine:simulation    PC:  11 ADDR:   0 MEM_OUT:   0 TOS:   1 COMMAND jmp       jmp
  INFO    machine:simulation    TOS: 15
  INFO    machine:simulation    STACK: [0]
  DEBUG   machine:simulation    PC:   1 ADDR:   0 MEM_OUT:   0 TOS:  15 COMMAND dup       dup
  INFO    machine:simulation    TOS: 15
  INFO    machine:simulation    STACK: [0, 15]
  DEBUG   machine:simulation    PC:   2 ADDR:   0 MEM_OUT:   0 TOS:  15 COMMAND ld        ld
  INFO    machine:get_char      data_address: 15
  INFO    machine:simulation    TOS: 33
  INFO    machine:simulation    STACK: [0, 15]
  DEBUG   machine:simulation    PC:   3 ADDR:  15 MEM_OUT:  33 TOS:  33 COMMAND push      push 12
  INFO    machine:simulation    TOS: 12
  INFO    machine:simulation    STACK: [0, 15, 33]
  DEBUG   machine:simulation    PC:   4 ADDR:  15 MEM_OUT:  33 TOS:  12 COMMAND xchng     xchng
  INFO    machine:simulation    TOS: 33
  INFO    machine:simulation    STACK: [0, 15, 12]
  DEBUG   machine:simulation    PC:   5 ADDR:  15 MEM_OUT:  33 TOS:  33 COMMAND jz        jz
  INFO    machine:simulation    TOS: 33
  INFO    machine:simulation    STACK: [0, 15]
  DEBUG   machine:simulation    PC:   6 ADDR:  15 MEM_OUT:  33 TOS:  33 COMMAND push      push 0
  INFO    machine:simulation    TOS: 0
  INFO    machine:simulation    STACK: [0, 15, 33]
  DEBUG   machine:simulation    PC:   7 ADDR:  15 MEM_OUT:  33 TOS:   0 COMMAND st        st
  DEBUG   machine:signal_wr     output: 'Hello, world' << '!'
  INFO    machine:simulation    TOS: 33
  INFO    machine:simulation    STACK: [0, 15]
  DEBUG   machine:simulation    PC:   8 ADDR:   0 MEM_OUT:   0 TOS:  33 COMMAND pop       pop
  INFO    machine:simulation    TOS: 15
  INFO    machine:simulation    STACK: [0]
  DEBUG   machine:simulation    PC:   9 ADDR:   0 MEM_OUT:   0 TOS:  15 COMMAND inc       inc
  INFO    machine:simulation    TOS: 16
  INFO    machine:simulation    STACK: [0]
  DEBUG   machine:simulation    PC:  10 ADDR:   0 MEM_OUT:   0 TOS:  16 COMMAND push      push 1
  INFO    machine:simulation    TOS: 1
  INFO    machine:simulation    STACK: [0, 16]
  DEBUG   machine:simulation    PC:  11 ADDR:   0 MEM_OUT:   0 TOS:   1 COMMAND jmp       jmp
  INFO    machine:simulation    TOS: 16
  INFO    machine:simulation    STACK: [0]
  DEBUG   machine:simulation    PC:   1 ADDR:   0 MEM_OUT:   0 TOS:  16 COMMAND dup       dup
  INFO    machine:simulation    TOS: 16
  INFO    machine:simulation    STACK: [0, 16]
  DEBUG   machine:simulation    PC:   2 ADDR:   0 MEM_OUT:   0 TOS:  16 COMMAND ld        ld
  INFO    machine:get_char      data_address: 16
  INFO    machine:simulation    TOS: 10
  INFO    machine:simulation    STACK: [0, 16]
  DEBUG   machine:simulation    PC:   3 ADDR:  16 MEM_OUT:  10 TOS:  10 COMMAND push      push 12
  INFO    machine:simulation    TOS: 12
  INFO    machine:simulation    STACK: [0, 16, 10]
  DEBUG   machine:simulation    PC:   4 ADDR:  16 MEM_OUT:  10 TOS:  12 COMMAND xchng     xchng
  INFO    machine:simulation    TOS: 10
  INFO    machine:simulation    STACK: [0, 16, 12]
  DEBUG   machine:simulation    PC:   5 ADDR:  16 MEM_OUT:  10 TOS:  10 COMMAND jz        jz
  INFO    machine:simulation    TOS: 10
  INFO    machine:simulation    STACK: [0, 16]
  DEBUG   machine:simulation    PC:   6 ADDR:  16 MEM_OUT:  10 TOS:  10 COMMAND push      push 0
  INFO    machine:simulation    TOS: 0
  INFO    machine:simulation    STACK: [0, 16, 10]
  DEBUG   machine:simulation    PC:   7 ADDR:  16 MEM_OUT:  10 TOS:   0 COMMAND st        st
  DEBUG   machine:signal_wr     output: 'Hello, world!' << '\n'
  INFO    machine:simulation    TOS: 10
  INFO    machine:simulation    STACK: [0, 16]
  DEBUG   machine:simulation    PC:   8 ADDR:   0 MEM_OUT:   0 TOS:  10 COMMAND pop       pop
  INFO    machine:simulation    TOS: 16
  INFO    machine:simulation    STACK: [0]
  DEBUG   machine:simulation    PC:   9 ADDR:   0 MEM_OUT:   0 TOS:  16 COMMAND inc       inc
  INFO    machine:simulation    TOS: 17
  INFO    machine:simulation    STACK: [0]
  DEBUG   machine:simulation    PC:  10 ADDR:   0 MEM_OUT:   0 TOS:  17 COMMAND push      push 1
  INFO    machine:simulation    TOS: 1
  INFO    machine:simulation    STACK: [0, 17]
  DEBUG   machine:simulation    PC:  11 ADDR:   0 MEM_OUT:   0 TOS:   1 COMMAND jmp       jmp
  INFO    machine:simulation    TOS: 17
  INFO    machine:simulation    STACK: [0]
  DEBUG   machine:simulation    PC:   1 ADDR:   0 MEM_OUT:   0 TOS:  17 COMMAND dup       dup
  INFO    machine:simulation    TOS: 17
  INFO    machine:simulation    STACK: [0, 17]
  DEBUG   machine:simulation    PC:   2 ADDR:   0 MEM_OUT:   0 TOS:  17 COMMAND ld        ld
  INFO    machine:get_char      data_address: 17
  INFO    machine:simulation    TOS: 0
  INFO    machine:simulation    STACK: [0, 17]
  DEBUG   machine:simulation    PC:   3 ADDR:  17 MEM_OUT:   0 TOS:   0 COMMAND push      push 12
  INFO    machine:simulation    TOS: 12
  INFO    machine:simulation    STACK: [0, 17, 0]
  DEBUG   machine:simulation    PC:   4 ADDR:  17 MEM_OUT:   0 TOS:  12 COMMAND xchng     xchng
  INFO    machine:simulation    TOS: 0
  INFO    machine:simulation    STACK: [0, 17, 12]
  DEBUG   machine:simulation    PC:   5 ADDR:  17 MEM_OUT:   0 TOS:   0 COMMAND jz        jz
  INFO    machine:simulation    TOS: 17
  INFO    machine:simulation    STACK: [0]
  DEBUG   machine:simulation    PC:  12 ADDR:  17 MEM_OUT:   0 TOS:  17 COMMAND pop       pop
  INFO    machine:simulation    TOS: 0
  INFO    machine:simulation    STACK: []
  DEBUG   machine:simulation    PC:  13 ADDR:  17 MEM_OUT:   0 TOS:   0 COMMAND hlt       hlt
  INFO    machine:simulation    output_buffer: 'Hello, world!\n'
